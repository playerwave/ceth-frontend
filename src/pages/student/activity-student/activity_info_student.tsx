import { useEffect, useCallback, useState } from "react";
import { useLocation, useNavigate, useParams } from "react-router-dom";
import { useActivityStore } from "../../../stores/Student/activity_student.store";
import {
  Clock,
  MapPin,
  Play,
  User,
  CalendarDays,
  Hourglass,
  Frown,
  School,
  HouseWifi,
} from "lucide-react";
import Typography from "@mui/material/Typography";
import { toast } from "sonner";

// import components
import Button from "../../../components/Button";
import ConfirmDialog from "../../../components/ConfirmDialog";
import Loading from "../../../components/Loading";

export default function ActivityInfoStudent() {
  const { id: paramId } = useParams();
  const location = useLocation();
  const id = location.state?.id || paramId; // ‚úÖ ‡πÉ‡∏ä‡πâ state ‡∏´‡∏£‡∏∑‡∏≠ param ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
  const finalActivityId = id ? Number(id) : null;
  const navigate = useNavigate();

  const {
    activities,
    searchResults,
    fetchActivities,
    searchActivities,
    activityLoading,
    error,
    fetchActivity,
    enrollActivity,
    enrolledActivities,
    fetchEnrolledActivities,
    unenrollActivity,
  } = useActivityStore();

  const [isEnrolled, setIsEnrolled] = useState(false);

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î
  useEffect(() => {
    const userId = 8;
    fetchEnrolledActivities(userId);
  }, []);

  // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ user ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à)
  useEffect(() => {
    console.log("üì° Fetching Activity Details...");
    fetchActivity(id);
  }, [fetchEnrolledActivities]); // ‚úÖ ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ `fetchEnrolledActivities` ‡πÄ‡∏™‡∏£‡πá‡∏à

  useEffect(() => {
    if (enrolledActivities.length === 0) {
      console.log("‚ö† ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• enrolledActivities ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÇ‡∏´‡∏•‡∏î");
      return;
    }

    console.log("üîÑ Checking if user is enrolled...");

    const isUserEnrolled = enrolledActivities.some(
      (act) => Number(act.ac_id) === Number(id) // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
    );

    setIsEnrolled((prev) => {
      if (prev !== isUserEnrolled) {
        console.log("‚úÖ Updating isEnrolled to:", isUserEnrolled);
        return isUserEnrolled;
      }
      return prev; // ‚ùå ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏° ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á setState ‡∏ã‡πâ‡∏≥
    });
  }, [enrolledActivities, id]); // ‚úÖ ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ enrolledActivities ‡∏´‡∏£‡∏∑‡∏≠ id ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô

  console.log(id);

  console.log(enrolledActivities);

  console.log("‚úÖ isEnrolled (client-side):", isEnrolled);

  const [isEnrollModalOpen, setIsEnrollModalOpen] = useState(false);
  const [isUnEnrollModalOpen, setIsUnEnrollModalOpen] = useState(false);

  const fetchActivityData = useCallback(() => {
    if (finalActivityId !== null && !isNaN(finalActivityId)) {
      console.log("üì° Fetching Activity with ID:", finalActivityId);
      fetchActivity(finalActivityId);
    } else {
      console.error("‚ùå Error: Activity ID is missing or invalid!");
    }
  }, [finalActivityId, fetchActivity]);

  useEffect(() => {
    fetchActivityData();
  }, [fetchActivityData]);

  console.log("üìå Activity from Store:", activity);

  if (activityLoading) return <Loading />;
  if (error)
    return <p className="text-center text-lg text-red-500">‚ùå {error}</p>;
  if (!activity) return <p className="text-center text-lg">‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</p>;

  const formatTime = (date) => {
    let hours = date.getHours();
    let minutes = date.getMinutes();
    let ampm = hours >= 12 ? "PM" : "AM";
    hours = hours % 12 || 12; // ‡πÅ‡∏õ‡∏•‡∏á 0 ‡πÄ‡∏õ‡πá‡∏ô 12
    minutes = minutes.toString().padStart(2, "0"); // ‡πÄ‡∏ï‡∏¥‡∏° 0 ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 10
    return `${hours}:${minutes} ${ampm}`;
  };

  const handleEnroll = async () => {
    const userId = 8; // ‡∏î‡∏∂‡∏á userId ‡∏à‡∏≤‡∏Å localStorage
    if (!userId) {
      toast.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ");
      return;
    }

    await enrollActivity(userId, activity.id); // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
    setIsEnrollModalOpen(false); // ‡∏õ‡∏¥‡∏î Modal
    navigate("/list-activity-student");
    window.location.reload();
  };

  const handleUnenroll = async () => {
    const userId = 8; // ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å localStorage ‡πÅ‡∏ó‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
    if (!userId) {
      toast.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ");
      return;
    }

    await unenrollActivity(userId, activity.id); // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô store ‡∏î‡πâ‡∏ß‡∏¢
    toast.success("‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
    navigate("/main-student");
    window.location.reload();
  };

  return (
    <div className="justify-items-center">
      <div className="w-320 h-230 mx-auto ml-2xl mt-5 mb-5 bg-white p-8 border border-gray-200 rounded-lg shadow-sm">
        <div className="flex justify-between items-center">
          <h1 className="text-[35px] font-semibold font-sans">
            {activity.name}
          </h1>
          <div
            className="flex items-center text-[25px] gap-[4px] cursor-pointer"
            onClick={() => navigate(`/enrolled_list_admin/${activity.id}`)}
          >
            {activity.registered_count}/{activity.seat} <User size={40} />
          </div>
        </div>

        {/* ‡∏†‡∏≤‡∏û‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° */}
        <div className="flex justify-center w-full h-130 bg-white border border-black rounded-lg mt-4">
          <img
            src={activity.image_url || "/img/default.png"} // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ Cloudinary ‡∏´‡∏£‡∏∑‡∏≠ default
            alt="Activity"
            className="w-full h-full object-cover rounded-lg"
            onError={(e) => (e.currentTarget.src = "/img/default.png")} // ‚úÖ ‡πÉ‡∏ä‡πâ default image ‡∏ñ‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
          />
        </div>

        {/* ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° */}
        <div className="flex items-center justify-between w-full mt-4">
          <div className="flex items-center gap-2">
            <p className="font-semibold text-[25px] font-sans">
              {activity.company_lecturer}
            </p>
            <span
              className="px-2 py-1 rounded ml-5"
              style={{
                backgroundColor:
                  activity.type === "Hard Skill"
                    ? "rgba(255, 174, 0, 0.2)"
                    : "rgba(9, 0, 255, 0.2)",
                color: activity.type === "Hard Skill" ? "#FFAE00" : "#0900FF",
                minWidth: "100px",
                display: "flex", // ‚úÖ ‡πÉ‡∏ä‡πâ flexbox
                justifyContent: "center", // ‚úÖ ‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô
                alignItems: "center",
              }}
            >
              {activity.type}
            </span>

            <div className="text-green-600 text-2xl">
              +<span className="text-3xl">{activity.recieve_hours} Hrs</span>
            </div>
          </div>
          <div className="flex items-center gap-1 font-[Sarabun]">
            {activity.location_type == "Onsite" ? (
              <Typography
                component="span"
                sx={{
                  display: "inline-flex",
                  alignItems: "center",
                  gap: 1,
                  pr: 4,
                }}
              >
                <School /> Onsite
              </Typography>
            ) : (
              <Typography
                component="span"
                sx={{ display: "inline-flex", alignItems: "center", gap: 1 }}
              >
                <HouseWifi /> {activity.location_type}
              </Typography>
            )}
            <CalendarDays size={25} />
            ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°{" "}
            {activity.start_time
              ? new Date(activity.start_time).getDate() + 1 < 10
                ? `0${new Date(activity.start_time).getDate() + 1}`
                : new Date(activity.start_time).getDate()
              : "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}{" "}
            /
            {activity.start_time
              ? new Date(activity.start_time).getMonth() + 1 < 10
                ? `0${new Date(activity.start_time).getMonth() + 1}`
                : new Date(activity.start_time).getMonth() // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
              : "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}{" "}
            /
            {activity.start_time
              ? new Date(activity.start_time).getFullYear()
              : "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}{" "}
            <Hourglass size={25} /> ‡∏õ‡∏¥‡∏î‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô{" "}
            {activity.end_register
              ? new Date(activity.end_register).getDate() + 1 < 10
                ? `0${new Date(activity.end_register).getDate() + 1}`
                : new Date(activity.end_register).getDate() // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
              : "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}{" "}
            /
            {activity.end_register
              ? new Date(activity.end_register).getMonth() + 1 < 10
                ? `0${new Date(activity.end_register).getMonth() + 1}`
                : new Date(activity.end_register).getMonth() // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
              : "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}{" "}
            /
            {activity.end_register
              ? new Date(activity.end_register).getFullYear()
              : "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}{" "}
            <MapPin size={25} /> ‡∏ä‡∏±‡πâ‡∏ô {activity.room[0]} ‡∏´‡πâ‡∏≠‡∏á {activity.room}
          </div>
        </div>

        <p className="mt-2 text-[14px] font-sans">{activity.description}</p>

        {/*‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏≠‡∏≤‡∏´‡∏≤‡∏£*/}
        <div className="mt-4">
          <p className="font-semibold font-[Sarabun]">‡∏≠‡∏≤‡∏´‡∏≤‡∏£</p>
          {Array.isArray(activity.food) && activity.food.length > 0 ? (
            <select className="w-[40%] p-2 border border-[#ccc] rounded mt-1">
              {activity.food.map((food, index) => (
                <option key={index} className="font-[Sarabun]">
                  {food}
                </option>
              ))}
            </select>
          ) : (
            <p className="text-gray-500 mt-1 flex items-center">
              ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏µ‡πâ <Frown className="ml-3" />
            </p>
          )}
        </div>

        {/* ‡πÄ‡∏ß‡∏•‡∏≤ + ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ + ‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≤‡∏á ‡πÜ */}
        <div className="flex justify-between items-center mt-4 text-[14px]">
          <div className="flex items-center gap-2">
            <div className="flex items-center gap-1 font-[Sarabun] font-semibold">
              <Clock size={25} />
              {activity.start_time
                ? formatTime(new Date(activity.start_time))
                : "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}{" "}
              -{" "}
              {activity.end_time
                ? formatTime(new Date(activity.end_time))
                : "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}
            </div>

            <div className="flex items-center gap-1 ml-3 font-[Sarabun] font-semibold">
              <Play size={25} /> {activity.state}
            </div>
          </div>
          {isEnrolled ? (
            <ConfirmDialog
              isOpen={isUnEnrollModalOpen}
              title="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°"
              message={`‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏µ‡πâ
                      (‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏î‡πâ‡∏ñ‡∏∂‡∏á ${new Intl.DateTimeFormat(
                        "th-TH",
                        {
                          day: "2-digit",
                          month: "long",
                          year: "numeric",
                        }
                      ).format(activity.end_register)})`}
              onCancel={() => setIsUnEnrollModalOpen(false)}
              // ‚úÖ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏∏‡πà‡∏° submit
              onConfirm={handleUnenroll}
            />
          ) : (
            <ConfirmDialog
              isOpen={isEnrollModalOpen}
              title="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô"
              message={`‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏µ‡πâ
                      (‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡∏ñ‡∏∂‡∏á ${new Intl.DateTimeFormat(
                        "th-TH",
                        {
                          day: "2-digit",
                          month: "long",
                          year: "numeric",
                        }
                      ).format(activity.end_register)})`}
              onCancel={() => setIsEnrollModalOpen(false)}
              // ‚úÖ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏∏‡πà‡∏° submit
              onConfirm={handleEnroll}
            />
          )}

          {/* ‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≤‡∏á ‡πÜ */}
          <div className="flex justify-end gap-3">
            <Button color="blue" onClick={() => window.history.back()}>
              ‚Üê ‡∏Å‡∏•‡∏±‡∏ö
            </Button>

            {isEnrolled ? (
              <Button color="red" onClick={() => setIsUnEnrollModalOpen(true)}>
                ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
              </Button>
            ) : (
              <Button color="blue" onClick={() => setIsEnrollModalOpen(true)}>
                ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
              </Button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default ManageActivityStudent;
