import React, { useState, useEffect, useRef } from "react";
import { useAssessmentStore } from "../../../../stores/Teacher/assessment.store";
import Loading from "../../../../components/Loading";
import { useNavigate, useLocation } from "react-router-dom";
import { toast } from "sonner";
import { Dayjs } from "dayjs";
import dayjs from "dayjs";
import { Box } from "@mui/material";
// import { Delete, Add } from "@mui/icons-material";
import { SelectChangeEvent } from "@mui/material"; // ‚úÖ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ SelectChangeEvent
import { useActivityStore } from "../../../../stores/Teacher/activity.store.teacher";
import { useSecureLink } from "../../../../routes/secure/SecureRoute";
import { Activity } from "../../../../types/model";
import { useFoodStore } from "../../../../stores/Teacher/food.store.teacher";
import { useRoomStore } from "../../../../stores/Teacher/room.store";
import { Trash2 } from "lucide-react"; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° icon ‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞
import ConfirmDialog from "../../../../components/ConfirmDialog"; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° ConfirmDialog

import {
  handleChange,
  // convertToDate,
} from "./utils/form_utils"; // ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô path ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á
import { handleDateTimeChange as handleDateTimeChangeBase } from "./utils/form_utils";

import { handleChange as formHandleChange, validateForm } from "./utils/form_utils";
import ActivityInfoSection from "./components/ActivityInfoSection";
import RegisterPeriodSection from "./components/RegisterPeriodSection";
import ActivityTimeSection from "./components/ActivityTimeSection";
import TypeAndLocationSection from "./components/TypeAndLocationSection";
import RoomSelectionSection from "./components/RoomSelectionSection";
// import FoodMenuSection from "./components/FoodMenuSection";

import FoodMultiSelect from "./components/FoodMultiSelection"; // ‚úÖ ‡πÉ‡∏ä‡πâ FoodMultiSelect ‡πÅ‡∏ó‡∏ô FoodMenuSection
import AssessmentSection from "./components/AssessmentSection";
import ImageUploadSection from "./components/ImageUploadSection";
import ActionButtonsSection from "./components/ActionButtonsSection";
import DescriptionSection from "./components/DescriptionSection";
import StatusAndSeatSection from "./components/StatusAndSeatSection";
import ActivityLink from "./components/ActivityLink"; // ‚úÖ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ ActivityLink
import {
  useSecureParams,
  extractSecureParam,
} from "../../../../routes/secure/SecureRoute";


export interface CreateActivityForm extends Partial<Activity> {
  selectedFoods: number[];
}

const CreateActivityAdmin: React.FC = () => {
  const { createActivity, activityLoading, fetchActivity, activity, updateActivity } = useActivityStore(); //
  const { createSecureLink } = useSecureLink();
  const savedFoods = JSON.parse(localStorage.getItem("selectedFoods") || "[]");
  const [formData, setFormData] = useState<CreateActivityForm>({
  activity_id: undefined,
  activity_name: "",
  presenter_company_name: "",
  description: "",
  type: "Soft",
  seat: undefined,
  recieve_hours: 0,
  event_format: "Onsite",
  activity_status: "Private",
  activity_state: "Not Start",
  create_activity_date: "",
  last_update_activity_date: "",
  start_register_date: "",
  special_start_register_date: "",
  end_register_date: "",
  start_activity_date: "",
  end_activity_date: "",
  image_url: "",
  assessment_id: undefined,
  room_id: undefined,
  start_assessment: "",
  end_assessment: "",
  status: "Active",
  url: "",
  selectedFoods: savedFoods,
});

  const navigate = useNavigate();
  const location = useLocation();
  const params = useSecureParams();
  
  // üîê ‡∏î‡∏∂‡∏á ID ‡∏à‡∏≤‡∏Å URL ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™
  const finalActivityId = extractSecureParam(params, 'id', 0);

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏•‡∏¢ start_activity_date ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
  const isActivityStarted = () => {
    if (!formData.start_activity_date) return false;
    const now = dayjs();
    const startTime = dayjs(formData.start_activity_date);
    return now.isAfter(startTime) || now.isSame(startTime);
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const isFieldEditable = (fieldName: string) => {
    if (!isActivityStarted()) return true; // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å field
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà end_assessment
    return fieldName === 'end_assessment';
  };

  const { assessments, fetchAssessments } = useAssessmentStore();
  const foods = useFoodStore((state) => state.foods); // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏Å‡πà‡∏≠‡∏ô
  const fetchFoods = useFoodStore((state) => state.fetchFoods);
  const { rooms, fetchRooms } = useRoomStore();

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• activity ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component mount
  useEffect(() => {
    if (finalActivityId) {
      console.log("üì• Fetching activity for update:", finalActivityId);
      fetchActivity(finalActivityId);
    }
  }, [finalActivityId, fetchActivity]);

  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï form ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• activity
  useEffect(() => {
    if (activity) {
      console.log("üìù Populating form with activity data:", activity);
      console.log("üçΩÔ∏è Activity foods:", (activity as any).foods);
      console.log("üçΩÔ∏è Activity activityFood:", (activity as any).activityFood);
      
      // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• validation ‡∏à‡∏≤‡∏Å URL
      const urlValidationError = extractSecureParam(params, 'validationError', '');
      const urlTargetStatus = extractSecureParam(params, 'targetStatus', '');
      const urlShowValidationErrors = extractSecureParam(params, 'showValidationErrors', false);
      
      console.log("üîç Validation data from URL:", {
        urlValidationError,
        urlTargetStatus,
        urlShowValidationErrors
      });
      
      // ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤ state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö validation
      setValidationError(urlValidationError);
      setTargetStatus(urlTargetStatus);
      setShowValidationErrors(urlShowValidationErrors);
      
      // ‡πÄ‡∏Å‡πá‡∏ö activity_status ‡∏à‡∏≤‡∏Å Backend
      setBackendActivityStatus(activity.activity_status || "Private");
      
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ validation error ‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô Public ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ activity_status ‡πÄ‡∏õ‡πá‡∏ô Public
      const initialActivityStatus = (urlShowValidationErrors && urlTargetStatus && urlTargetStatus === "Public") 
        ? "Public" 
        : (activity.activity_status || "Private");
      
      setFormData({
        activity_id: activity.activity_id,
        activity_name: activity.activity_name || "",
        presenter_company_name: activity.presenter_company_name || "",
        description: activity.description || "",
        type: activity.type || "Soft",
        seat: activity.event_format === "Course" ? 0 : activity.seat, // ‚úÖ ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Course
        recieve_hours: activity.recieve_hours || 0,
        event_format: activity.event_format || "Onsite",
        activity_status: initialActivityStatus, // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å URL
        activity_state: activity.activity_state || "Not Start",
        create_activity_date: activity.create_activity_date || "",
        last_update_activity_date: activity.last_update_activity_date || "",
        start_register_date: activity?.start_register_date ? convertUTCToLocal(activity.start_register_date) : "",
        special_start_register_date: activity?.special_start_register_date ? convertUTCToLocal(activity.special_start_register_date) : "",
        end_register_date: activity?.end_register_date ? convertUTCToLocal(activity.end_register_date) : "",
        start_activity_date: activity?.start_activity_date ? convertUTCToLocal(activity.start_activity_date) : "",
        end_activity_date: activity?.end_activity_date ? convertUTCToLocal(activity.end_activity_date) : "",
        image_url: activity.image_url || "",
        assessment_id: activity.event_format === "Course" ? undefined : activity.assessment_id, // ‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Course
        room_id: activity.room_id,
        start_assessment: activity.event_format === "Course" ? "" : (activity?.start_assessment ? convertUTCToLocal(activity.start_assessment) : ""), // ‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Course
        end_assessment: activity.event_format === "Course" ? "" : (activity?.end_assessment ? convertUTCToLocal(activity.end_assessment) : ""), // ‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Course
        status: activity.status || "Active",
        url: activity.url || "",
        selectedFoods: (activity as any).foods?.map((food: any) => food.food_id) || savedFoods,
      });

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï preview image ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
      if (activity.image_url && typeof activity.image_url === 'string') {
        setPreviewImage(activity.image_url);
      }

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
      if (activity.room_id) {
        const selectedRoom = rooms.find(room => room.room_id === activity.room_id);
        if (selectedRoom) {
          setSelectedFloor(selectedRoom.floor);
          setSelectedRoom(selectedRoom.room_name);
          setSeatCapacity(selectedRoom.seat_number?.toString() || "");
        }
      }
    }
  }, [activity, rooms]);


  // const IfBuildingRoom: Record<string, { name: string; capacity: number }[]> = {
  //   "3": [
  //     { name: "IF-3M210", capacity: 210 }, // ‡∏´‡πâ‡∏≠‡∏á‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢
  //     { name: "IF-3C01", capacity: 55 }, // ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£
  //     { name: "IF-3C02", capacity: 55 },
  //     { name: "IF-3C03", capacity: 55 },
  //     { name: "IF-3C04", capacity: 55 },
  //   ],
  //   "4": [
  //     { name: "IF-4M210", capacity: 210 }, // ‡∏´‡πâ‡∏≠‡∏á‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢
  //     { name: "IF-4C01", capacity: 55 }, // ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£
  //     { name: "IF-4C02", capacity: 55 },
  //     { name: "IF-4C03", capacity: 55 },
  //     { name: "IF-4C04", capacity: 55 },
  //   ],
  //   "5": [
  //     { name: "IF-5M210", capacity: 210 }, // ‡∏´‡πâ‡∏≠‡∏á‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢
  //   ],
  //   "11": [
  //     { name: "IF-11M280", capacity: 280 }, // ‡∏´‡πâ‡∏≠‡∏á‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢
  //   ],
  // };

  useEffect(() => {
  fetchRooms(); // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ component mount
}, []);

useEffect(() => {
  fetchFoods(); // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£
}, []);

useEffect(() => {
    fetchAssessments(); // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠ component mount
  }, []);



  const [selectedFloor, setSelectedFloor] = useState<string>("");
  const [selectedRoom, setSelectedRoom] = useState<string>("");
  const [seatCapacity, setSeatCapacity] = useState<string>(""); // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const [imageFile, setImageFile] = useState<File | null>(null);
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö dialog ‡∏•‡∏ö
  
  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö validation
  const [validationError, setValidationError] = useState<string>('');
  const [targetStatus, setTargetStatus] = useState<string>('');
  const [showValidationErrors, setShowValidationErrors] = useState<boolean>(false);
  
  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö error ‡πÅ‡∏•‡∏∞ activity_status ‡∏à‡∏≤‡∏Å Backend
  const [backendActivityStatus, setBackendActivityStatus] = useState<string>('');
  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});

  const uniqueFloors = Array.from(new Set(rooms.map((r) => r.floor))).sort();

  const filteredRooms = rooms.filter((r) => r.floor === selectedFloor);


  // const handleFloorChange = (event: SelectChangeEvent) => {
  //   setSelectedFloor(event.target.value);
  //   setSelectedRoom(""); // ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏±‡πâ‡∏ô
  //   setSeatCapacity(""); // ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏±‡πâ‡∏ô
  // };

  // const handleRoomChange = (event: SelectChangeEvent) => {
  //   setSelectedRoom(event.target.value);

  //   // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ `capacity` ‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  //   const selectedRoomObj = IfBuildingRoom[selectedFloor]?.find(
  //     (room) => room.name === event.target.value,
  //   );

  //   const newSeatCapacity = selectedRoomObj ? selectedRoomObj.capacity : "";

  //   setSeatCapacity(newSeatCapacity === "" ? "" : String(newSeatCapacity));
  //   // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á

  //   setFormData((prev) => ({
  //     ...prev,
  //     ac_room: event.target.value, // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  //     ac_seat: newSeatCapacity.toString(), // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á
  //   }));
  // };

  const handleFloorChange = (event: SelectChangeEvent) => {
  setSelectedFloor(event.target.value);
  setSelectedRoom("");
  setSeatCapacity("");
};

const handleRoomChange = (event: SelectChangeEvent) => {
  const roomName = event.target.value;
  setSelectedRoom(roomName);

  const selectedRoomObj = filteredRooms.find((r) => r.room_name === roomName);
  const newSeatCapacity = selectedRoomObj?.seat_number ?? "";

  setSeatCapacity(newSeatCapacity.toString());

  setFormData((prev) => ({
    ...prev,
    room_id: selectedRoomObj?.room_id,
    seat: typeof newSeatCapacity === "string"
      ? parseInt(newSeatCapacity)
      : newSeatCapacity, // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô number
  }));
};



  const [previewImage, setPreviewImage] = useState<string | null>(null);

  const uploadImageToCloudinary = async (file: File) => {
    if (!file || !file.type.startsWith("image/")) {
      throw new Error("Invalid file type. Please upload an image.");
    }

    const formData = new FormData();
    formData.append("file", file);
    formData.append("upload_preset", "ceth-project"); // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ

    const response = await fetch(
      "https://api.cloudinary.com/v1_1/dn5vhwoue/image/upload",
      {
        method: "POST",
        body: formData,
      },
    );

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Cloudinary upload failed: ${errorText}`);
    }

    const data = await response.json();
    console.log("Upload image success!", data.secure_url);
    return data.secure_url;
  };

  // const convertToDate = (value: string | null | undefined) =>
  //   value && value.trim() !== "" ? new Date(value) : undefined;

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!validateForm(formData, setErrors)) {
      toast.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°!");
      return;
    }

    if (imageFile) {
      await uploadImageToCloudinary(imageFile);
    }

    let acRecieveHours = formData.recieve_hours
      ? Number(formData.recieve_hours)
      : 0;

    if (
      formData.event_format !== "Course" &&
      formData.start_activity_date &&
      formData.end_activity_date
    ) {
      const start = dayjs(formData.start_activity_date);
      const end = dayjs(formData.end_activity_date);
      const duration = end.diff(start, "hour", true); // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (‡∏£‡∏ß‡∏°‡πÄ‡∏®‡∏©‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°)
      acRecieveHours = duration > 0 ? duration : 0; // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡∏¥‡∏î‡∏•‡∏ö
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ activity_status ‡πÄ‡∏õ‡πá‡∏ô "Public"
    if (formData.activity_status === "Public" && !formData.start_register_date) {
      toast.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô");
      return;
    }

    let startRegister = dayjs(formData.start_register_date ?? "").toDate();
    if (formData.activity_status == "Public") {
      startRegister = new Date(); // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ dayjs ‡∏Å‡πá‡πÑ‡∏î‡πâ
    }

    console.log("üöÄ Data ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ store:", formData);

    try {
      if (finalActivityId) {
        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        console.log("üîÑ Updating existing activity:", finalActivityId);
        
        // ‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö backend requirements
        const updateData = {
          ...formData,
          // ‚úÖ ‡πÉ‡∏ä‡πâ acRecieveHours ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ó‡∏ô formData.recieve_hours
          recieve_hours: acRecieveHours,
          // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç floor ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô string (‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å selectedFloor ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏≤‡∏Å room ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
          floor: selectedFloor || (formData.room_id ? rooms.find(r => r.room_id === formData.room_id)?.floor || "" : ""),
          // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç room_id ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô integer
          room_id: formData.room_id ? Number(formData.room_id) : null,
          // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç seat ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô integer ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô null
          seat: formData.seat ? Number(formData.seat) : 0,
          // ‚úÖ ‡∏™‡πà‡∏á foodIds ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ event_format ‡πÄ‡∏õ‡πá‡∏ô Onsite
          foodIds: formData.event_format === "Onsite" ? (Array.isArray(formData.selectedFoods) && formData.selectedFoods.length > 0 ? formData.selectedFoods : []) : [],
          // ‚úÖ ‡∏•‡∏ö selectedFoods ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å request ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Onsite
          selectedFoods: formData.event_format === "Onsite" ? formData.selectedFoods : [],
        };

        // ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ image_url ‡πÅ‡∏¢‡∏Å (‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û)
        if (typeof formData.image_url === 'string' && formData.image_url.trim() !== "") {
          updateData.image_url = formData.image_url;
        }
        
        console.log("üöÄ Data ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ store:", updateData);
        const result = await updateActivity(updateData as Activity);
        console.log("‚úÖ Activity updated successfully:", result);
        toast.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        return finalActivityId; // ‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô activity_id
      } else {
        // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà
        console.log("‚ûï Creating new activity");
        const result = await createActivity(formData);
        console.log("‚úÖ Activity created successfully:", result);
        toast.success("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        return result; // ‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô activity_id
      }
    } catch (error) {
      console.error("‚ùå Error saving activity:", error);
      toast.error("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      throw error; // ‚úÖ re-throw ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ ActionButtonsSection ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏î error
    }
  };

  // const addFoodOption = () => {
  //   setFormData((prev) => ({
  //     ...prev,
  //     ac_food: [
  //       ...(prev.selectedFoods ?? []),
  //       `‡πÄ‡∏°‡∏ô‡∏π ${prev.selectedFoods?.length ?? 0 + 1}`,
  //     ],
  //   }));
  // };


  function addFoodOption() {
  setFormData((prev) => ({
    ...prev,
    selectedFoods: [...prev.selectedFoods, 0], // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ food_id ‡πÄ‡∏ä‡πà‡∏ô 0
  }));
}

const hasAdded = useRef(false);

useEffect(() => {
  if (
    formData.event_format === "Onsite" &&
    foods.length > 0 &&
    formData.selectedFoods.length === 0 &&
    savedFoods.length === 0 && // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ check ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ
    !hasAdded.current
  ) {
    hasAdded.current = true;
    addFoodOption();
  }
}, [formData.event_format, foods, formData.selectedFoods]);

useEffect(() => {
  if (formData.selectedFoods.length > 0) {
    localStorage.setItem("selectedFoods", JSON.stringify(formData.selectedFoods));
  }
}, [formData.selectedFoods]);




  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£

  const updateFoodOption = (index: number, newFoodId: number) => {
  const updated = [...formData.selectedFoods];
  updated[index] = newFoodId;
  setFormData((prev) => ({
    ...prev,
    selectedFoods: updated,
  }));
};


  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£
  const removeFoodOption = (index: number) => {
    const updatedFoodOptions = formData.selectedFoods?.filter((_, i) => i !== index);
    setFormData((prev) => ({ ...prev, selectedFoods: updatedFoodOptions }));
  };

  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      const file = e.target.files[0];

      if (!file.type.startsWith("image/")) {
        toast.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!");
        return;
      }

      if (file.size > 5 * 1024 * 1024) {
        toast.error("‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB)");
        return;
      }

      // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      const localPreviewUrl = URL.createObjectURL(file);
      setPreviewImage(localPreviewUrl);

      try {
        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á Cloudinary
        const cloudinaryUrl = await uploadImageToCloudinary(file);

        // ‚úÖ ‡πÄ‡∏ã‡πá‡∏ï URL ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ formData
        setFormData((prev) => ({
          ...prev,
          image_url: cloudinaryUrl,
        }));

        toast.success("üì∏ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      } catch (error) {
        console.error("‚ùå Upload failed:", error);
        toast.error("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      }
    }
  };

  const [isModalOpen, setIsModalOpen] = useState(false);

  // useEffect(() => {
  //   console.log("Fetching assessments..."); // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ useEffect ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
  //   fetchAssessments();
  // }, []);

  // useEffect(() => {
  //   console.log("Assessments:", assessments); // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ assessments ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  // }, [assessments]);

  const handleFormChange = (e: React.ChangeEvent<any> | SelectChangeEvent) => {
    formHandleChange(e, setFormData);
    
    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô event_format ‡πÄ‡∏õ‡πá‡∏ô Course ‡πÉ‡∏´‡πâ‡πÄ‡∏ã‡πá‡∏ï seat ‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
    if (e.target.name === "event_format" && e.target.value === "Course") {
      setFormData((prev) => ({
        ...prev,
        seat: 0,
        assessment_id: undefined, // ‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
        start_assessment: "", // ‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
        end_assessment: "", // ‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
      }));
    }
    
    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô event_format ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Onsite ‡πÉ‡∏´‡πâ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏´‡∏≤‡∏£
    if (e.target.name === "event_format" && e.target.value !== "Onsite") {
      setFormData((prev) => ({
        ...prev,
        selectedFoods: [], // ‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏´‡∏≤‡∏£
      }));
      localStorage.removeItem("selectedFoods"); // ‚úÖ ‡∏•‡πâ‡∏≤‡∏á localStorage ‡∏î‡πâ‡∏ß‡∏¢
      console.log("üßπ Cleared selectedFoods for non-Onsite event format");
    }
  };

  // ‚úÖ Wrapper ‡∏ó‡∏µ‡πà fix setFormData
  const handleDateTimeChange = (name: string, newValue: Dayjs | null) => {
    handleDateTimeChangeBase(name, newValue, setFormData);
  };
  
  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö validation ‡πÄ‡∏°‡∏∑‡πà‡∏≠ activity_status ‡πÄ‡∏õ‡πá‡∏ô Public
  const checkValidationForPublic = () => {
    if (formData.activity_status === "Public") {
      const isValid = validateForm(formData, setValidationErrors);
      return isValid;
    }
    return true;
  };
  
  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô handleFormChange ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö validation
  const handleFormChangeWithValidation = (e: React.ChangeEvent<any> | SelectChangeEvent) => {
    formHandleChange(e, setFormData);
    
    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô event_format ‡πÄ‡∏õ‡πá‡∏ô Course ‡πÉ‡∏´‡πâ‡πÄ‡∏ã‡πá‡∏ï seat ‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
    if (e.target.name === "event_format" && e.target.value === "Course") {
      setFormData((prev) => ({
        ...prev,
        seat: 0,
        assessment_id: undefined, // ‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
        start_assessment: "", // ‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
        end_assessment: "", // ‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
      }));
    }
    
    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô event_format ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Onsite ‡πÉ‡∏´‡πâ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏´‡∏≤‡∏£
    if (e.target.name === "event_format" && e.target.value !== "Onsite") {
      setFormData((prev) => ({
        ...prev,
        selectedFoods: [], // ‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏´‡∏≤‡∏£
      }));
      localStorage.removeItem("selectedFoods"); // ‚úÖ ‡∏•‡πâ‡∏≤‡∏á localStorage ‡∏î‡πâ‡∏ß‡∏¢
      console.log("üßπ Cleared selectedFoods for non-Onsite event format");
    }
    
    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö validation ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô activity_status ‡πÄ‡∏õ‡πá‡∏ô Public
    if (e.target.name === "activity_status" && e.target.value === "Public") {
      setTimeout(() => {
        checkValidationForPublic();
      }, 100); // ‡∏£‡∏≠‡πÉ‡∏´‡πâ formData ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡πà‡∏≠‡∏ô
    }
  };
  
  // ‚úÖ useEffect ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö validation ‡πÄ‡∏°‡∏∑‡πà‡∏≠ formData ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
  useEffect(() => {
    if (backendActivityStatus === "Private" && formData.activity_status === "Public") {
      checkValidationForPublic();
    }
  }, [formData, backendActivityStatus]);

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á UTC ‡πÄ‡∏õ‡πá‡∏ô local time
  const convertUTCToLocal = (utcString: string): string => {
    if (!utcString) return "";
    try {
      const date = new Date(utcString);
      return date.toLocaleString('sv-SE').replace(' ', 'T');
    } catch (error) {
      console.error("‚ùå Error converting UTC to local:", error);
      return utcString;
    }
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const canDeleteActivity = () => {
    if (!activity) return false;
    const restrictedStates = ["Close Register", "Start Activity", "End Activity", "Start Assessment", "End Assessment"];
    return !restrictedStates.includes(activity.activity_state || "");
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
  const handleDeleteActivity = async () => {
    if (!activity || !canDeleteActivity()) {
      toast.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ");
      return;
    }

    try {
      // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏•‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
      await useActivityStore.getState().deleteActivity(activity.activity_id);
      toast.success("‡∏•‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      setDeleteDialogOpen(false);
      navigate("/list-activity-admin");
    } catch (error) {
      console.error("‚ùå Error deleting activity:", error);
      toast.error("‡∏•‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
    }
  };

  return (
    <>
      {activityLoading ? (
        <Loading />
      ) : (
        <Box className="justify-items-center">
          <div
            className={`w-320 mx-auto ml-2xl mt-5 mb-5 p-6 border bg-white border-gray-200 rounded-lg shadow-sm min-h-screen flex flex-col`}
          >
            <div className="flex items-center justify-between mb-11">
              <h1 className="text-4xl font-bold">
                {finalActivityId ? "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏´‡∏Å‡∏¥‡∏à" : "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏´‡∏Å‡∏¥‡∏à"}
              </h1>
              {finalActivityId && canDeleteActivity() && (
                <button
                  onClick={() => setDeleteDialogOpen(true)}
                  className="flex items-center gap-2 px-4 py-2 text-red-600 hover:text-red-700 hover:bg-red-50 border border-red-600 rounded-lg transition-colors"
                  title="‡∏•‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°"
                >
                  <Trash2 size={20} />
                  <span className="font-medium">‡∏•‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</span>
                </button>
              )}
            </div>
            
            {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß */}
            {isActivityStarted() && (
              <div className="mb-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                <div className="flex items-center">
                  <svg className="w-5 h-5 text-yellow-600 mr-2" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                  </svg>
                  <span className="text-yellow-800 font-medium">
                    ‚ö†Ô∏è ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ "‡∏ß‡∏±‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô" ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                  </span>
                </div>
              </div>
            )}
            
            {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ validation error */}
            {/* {showValidationErrors && validationError && (
              <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg">
                <div className="flex items-center">
                  <svg className="w-5 h-5 text-red-600 mr-2" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                  </svg>
                  <span className="text-red-800 font-medium">
                    ‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô Public
                  </span>
                </div>
                <div className="mt-2 text-red-700 text-sm">
                  <p>‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô</p>
                  <p>‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á</p>
                  <p>‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô‡πÜ</p>
                </div>
              </div>
            )} */}
            
            {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ Backend ‡πÄ‡∏õ‡πá‡∏ô Private ‡πÅ‡∏ï‡πà select ‡πÄ‡∏õ‡πá‡∏ô Public */}
            {backendActivityStatus === "Private" && formData.activity_status === "Public" && Object.keys(validationErrors).length > 0 && (
              <div className="mb-6 p-4 bg-orange-50 border border-orange-200 rounded-lg">
                <div className="flex items-center">
                  <svg className="w-5 h-5 text-orange-600 mr-2" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                  </svg>
                  <span className="text-orange-800 font-medium">
                    ‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô Public
                  </span>
                </div>
                <div className="mt-2 text-orange-700 text-sm">
                  <p>‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á</p>
                  <p>‚Ä¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á</p>
                </div>
                {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ error ‡∏ó‡∏µ‡πà‡∏û‡∏ö */}
                <div className="mt-3 text-orange-700 text-sm">
                  <p className="font-semibold">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:</p>
                  <ul className="list-disc list-inside mt-1 space-y-1">
                    {Object.entries(validationErrors).map(([field, message]) => (
                      <li key={field} className="text-orange-600">
                        {message}
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            )}
            
            <form onSubmit={handleSubmit} className="space-y-10 flex-grow">
              <div>
                {/* ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å: ‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° + ‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏¥‡∏î/‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô */}
                <div className="flex space-x-6  ">
                  <ActivityInfoSection
                    formData={formData}
                    handleChange={handleFormChangeWithValidation} // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ validation
                    disabled={isActivityStarted()}
                  />

                  <RegisterPeriodSection
                    formData={formData}
                    handleDateTimeChange={handleDateTimeChange}
                    disabled={isActivityStarted()}
                    isEditMode={false} // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô false ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á error
                  />
                  
                </div>

                {/* ‡πÅ‡∏ñ‡∏ß‡∏™‡∏≠‡∏á: ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ + ‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° + ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á */}
                {/* <div className="flex space-x-6 ">
                    <DescriptionSection
    formData={formData}
    handleChange={handleFormChangeWithValidation}
  />

                  <ActivityTimeSection
                    formData={formData}
                    setFormData={setFormData}
                    handleDateTimeChange={handleDateTimeChange}
                  />
                  
                </div>

                    <TypeAndLocationSection
      formData={formData}
      handleChange={handleFormChangeWithValidation}
      setSelectedFloor={setSelectedFloor}
      setSelectedRoom={setSelectedRoom}
      setSeatCapacity={setSeatCapacity}
    /> */}

                <div className="flex space-x-6">
  <DescriptionSection
    formData={formData}
    handleChange={handleFormChange}
    disabled={isActivityStarted()}
  />

  <div className="flex flex-col space-y-3">
    <ActivityTimeSection
      formData={formData}
      setFormData={setFormData}
      handleDateTimeChange={handleDateTimeChange}
      disabled={isActivityStarted()}
    />

    <TypeAndLocationSection
      formData={formData}
      handleChange={(e) => handleChange(e, setFormData)}
      setSelectedFloor={setSelectedFloor}
      setSelectedRoom={setSelectedRoom}
      setSeatCapacity={setSeatCapacity}
      disabled={isActivityStarted()}
    />
  </div>
</div>


<div className="flex space-x-6">
                <RoomSelectionSection
                  formData={formData}
                  selectedFloor={selectedFloor}
                  selectedRoom={selectedRoom}
                  rooms={rooms}
                  handleFloorChange={handleFloorChange}
                  handleRoomChange={handleRoomChange}
                  handleChange={handleFormChangeWithValidation}
                  disabled={isActivityStarted()}
                  seatCapacity={seatCapacity}
                  setSeatCapacity={setSeatCapacity}
                />

                <ActivityLink formData={formData} handleChange={handleFormChangeWithValidation} disabled={isActivityStarted()} />
                </div>

                <StatusAndSeatSection
                  formData={formData}
                  seatCapacity={seatCapacity}
                  handleChange={handleFormChangeWithValidation}
                  setSeatCapacity={setSeatCapacity}
                  selectedRoom={selectedRoom}
                  setFormData={setFormData}
                  disabled={isActivityStarted()}
                />

<div className="mt-6 max-w-xl w-full">
  <label className="block font-semibold">‡∏≠‡∏≤‡∏´‡∏≤‡∏£ *</label>
                <FoodMultiSelect
  foods={foods}
  selectedFoodIds={formData.selectedFoods}
  setSelectedFoodIds={(newIds) => {
                      console.log("üçΩÔ∏è Food selection changed:", { old: formData.selectedFoods, new: newIds });
  localStorage.setItem("selectedFoods", JSON.stringify(newIds)); // ‚úÖ sync ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
  setFormData((prev) => ({ ...prev, selectedFoods: newIds }));
}}
disabled={formData.event_format !== "Onsite"}
/>
</div>
                <AssessmentSection
                  formData={formData}
                  assessments={assessments}
                  handleChange={handleFormChangeWithValidation}
                  handleDateTimeChange={handleDateTimeChange}
                  disabled={isActivityStarted()}
                />

                <ImageUploadSection
                  previewImage={previewImage}
                  handleFileChange={handleFileChange}
                  disabled={isActivityStarted()}
                />

                <ActionButtonsSection
                  formStatus={formData.activity_status ?? "Private"}
                  isModalOpen={isModalOpen}
                  setIsModalOpen={setIsModalOpen}
                  isEditMode={!!finalActivityId}
                  originalStatus={activity?.activity_status ?? "Private"}
                  onSubmit={async () => {
                    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á fake event object ‡∏ó‡∏µ‡πà‡∏°‡∏µ preventDefault method
                    const fakeEvent = {
                      preventDefault: () => {},
                    } as React.FormEvent;
                    return await handleSubmit(fakeEvent);
                  }}
                  onSuccess={(activityId) => {
                    // ‚úÖ ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÄ‡∏î‡πâ‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ activity-info-admin
                    const targetId = activityId || finalActivityId;
                    console.log("üéØ Navigating to activity info with ID:", targetId);
                    if (targetId && targetId > 0) {
                      const secureUrl = createSecureLink("/activity-info-admin", { id: targetId.toString() });
                      console.log("üîó Secure URL:", secureUrl);
                      window.location.href = secureUrl;
                    } else {
                      console.error("‚ùå Invalid activity ID:", targetId);
                    }
                  }}
                />
              </div>
              
            </form>
          </div>
        </Box>
      )}

      {/* ‚úÖ Dialog ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° */}
      <ConfirmDialog
        isOpen={deleteDialogOpen}
        title="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°"
        message={`‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° "${activity?.activity_name}"?\n\n‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ`}
        onCancel={() => setDeleteDialogOpen(false)}
        onConfirm={handleDeleteActivity}
        type="button"
      />
    </>
  );
};

export default CreateActivityAdmin;
