// import { create } from "zustand";
// import { Room } from "../../types/model";
// import roomService from "../../service/Teacher/room.service";

// interface RoomStore {
//   rooms: Room[];
//   selectedRoom: Room | null;
//   room: Room | null;
//   loading: boolean;
//   error: string | null;
//   roomLoading: boolean;
//   roomError: string | null;

//   fetchRooms: () => Promise<void>;
//   fetchRoom: (id: number) => Promise<void>;
//   selectRoom: (id: number) => Promise<void>;
//   clearSelectedRoom: () => void;

//   createRoom: (roomData: Partial<Room>) => Promise<void>;
//   updateRoom: (room: Room) => Promise<void>;
//   deleteRoom: (id: number) => Promise<void>;

//   searchRooms?: (name: string) => Promise<void>;
//   searchResults?: Room[] | null;
// }

// export const useRoomStore = create<RoomStore>((set) => ({
//   rooms: [],
//   selectedRoom: null,
//   room: null,
//   loading: false,
//   error: null,
//   roomLoading: false,
//   roomError: null,
//   searchResults: null,

//   //------------------------------------------- Room Actions --------------------------------------------------

//   fetchRooms: async () => {
//     set({ loading: true, error: null });
//     try {
//       const data = await roomService.fetchAllRooms();
//       set({ rooms: data });
//     } catch (error) {
//       console.error("‚ùå Error fetching rooms:", error);
//       set({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ" });
//     } finally {
//       set({ loading: false });
//     }
//   },

//   fetchRoom: async (id: number) => {
//     set({ roomLoading: true, roomError: null });
//     try {
//       const room = await roomService.getRoomById(id);
//       set({ room });
//     } catch (error) {
//       console.error("‚ùå Error fetching room:", error);
//       set({ roomError: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ" });
//     } finally {
//       set({ roomLoading: false });
//     }
//   },

//   selectRoom: async (id: number) => {
//     set({ loading: true });
//     try {
//       const room = await roomService.getRoomById(id);
//       set({ selectedRoom: room });
//     } catch (error) {
//       set({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ" });
//     } finally {
//       set({ loading: false });
//     }
//   },

//   clearSelectedRoom: () => set({ selectedRoom: null }),

//   createRoom: async (roomData) => {
//     set({ loading: true, error: null });
//     try {
//       await roomService.createRoom(roomData);
//       const updatedList = await roomService.fetchAllRooms();
//       set({ rooms: updatedList });
//     } catch (error) {
//       console.error("‚ùå Error creating room:", error);
//       set({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ" });
//     } finally {
//       set({ loading: false });
//     }
//   },

//   updateRoom: async (room) => {
//     try {
//       await roomService.updateRoom(room);
//       const updatedList = await roomService.fetchAllRooms();
//       set({ rooms: updatedList });
//     } catch (error) {
//       console.error("‚ùå Error updating room:", error);
//     }
//   },

//   deleteRoom: async (id) => {
//     try {
//       await roomService.deleteRoom(id);
//       const updatedList = await roomService.fetchAllRooms();
//       set({ rooms: updatedList });
//     } catch (error) {
//       console.error("‚ùå Error deleting room:", error);
//     }
//   },

//   searchRooms: async (name: string) => {
//     if (!name.trim()) {
//       await useRoomStore.getState().fetchRooms();
//       set({ searchResults: null });
//       return;
//     }

//     set({ roomLoading: true, roomError: null });
//     try {
//       const results = await roomService.searchRoomsByName(name);
//       set({ searchResults: results });
//     } catch (error) {
//       console.error("‚ùå Error searching rooms:", error);
//       set({ roomError: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ" });
//     } finally {
//       set({ roomLoading: false });
//     }
//   },
// }));

import { create } from "zustand";
import { Building, Faculty, Room } from "../../types/model";
import roomService from "../../service/Teacher/room.service";

interface RoomStore {
  rooms: Room[];
  selectedRoom: Room | null;
  loading: boolean;
  error: string | null;
  buildings: Building[]; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
  faculties: Faculty[]; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
  availableRooms: Room[]; // ‚úÖ ‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á
  roomConflicts: any[]; // ‚úÖ ‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  checkingAvailability: boolean; // ‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö

  fetchRooms: () => Promise<void>;
  selectRoom: (room: Room) => void;
  clearSelectedRoom: () => void;

  createRoom: (roomData: Partial<Room>) => Promise<void>;
  updateRoom: (room: Room) => Promise<void>;
  deleteRoom: (id: number) => Promise<void>;

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á
  checkAvailableRooms: (
    start_date: string,
    end_date: string,
    exclude_id?: number
  ) => Promise<void>;
  checkRoomConflicts: (
    room_id: number,
    start_date: string,
    end_date: string,
    exclude_id?: number
  ) => Promise<void>;
  checkAllAvailableRooms: (
    start_date: string,
    end_date: string,
    exclude_id?: number
  ) => Promise<void>;
  clearAvailabilityCheck: () => void;

  // Optional: countRooms
  roomCount?: number;

  fetchRoomCount?: () => Promise<void>;
  fetchBuildings: () => Promise<void>; // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£
  fetchFaculties: () => Promise<void>; // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏ì‡∏∞
}

export const useRoomStore = create<RoomStore>((set) => ({
  rooms: [],
  selectedRoom: null,
  loading: false,
  error: null,
  roomCount: undefined,
  buildings: [], // ‚úÖ state ‡πÉ‡∏´‡∏°‡πà
  faculties: [], // ‚úÖ state ‡πÉ‡∏´‡∏°‡πà
  availableRooms: [], // ‚úÖ ‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á
  roomConflicts: [], // ‚úÖ ‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  checkingAvailability: false, // ‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö

  //------------------------------------------- Room Actions --------------------------------------------------

  fetchFaculties: async () => {
    try {
      const data = await roomService.fetchAllFaculties(); // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÉ‡∏ô roomService
      set({ faculties: data });
    } catch (error) {
      console.error("‚ùå Error fetching faculties:", error);
      set({ error: "‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ì‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
    }
  },

  fetchRooms: async () => {
    set({ loading: true, error: null });
    try {
      const data = await roomService.fetchAllRooms();
      set({ rooms: data });
    } catch (error) {
      console.error("‚ùå Error fetching rooms:", error);
      set({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ" });
    } finally {
      set({ loading: false });
    }
  },

  fetchRoomCount: async () => {
    try {
      const count = await roomService.countRooms();
      set({ roomCount: count });
    } catch (error) {
      console.error("‚ùå Error fetching room count:", error);
    }
  },

  selectRoom: (room: Room) => {
    set({ selectedRoom: room });
  },

  clearSelectedRoom: () => set({ selectedRoom: null }),

  createRoom: async (roomData) => {
    set({ loading: true, error: null });
    try {
      await roomService.createRoom(roomData);
      const updatedList = await roomService.fetchAllRooms();
      set({ rooms: updatedList });
    } catch (error) {
      console.error("‚ùå Error creating room:", error);
      set({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ" });
    } finally {
      set({ loading: false });
    }
  },

  updateRoom: async (room) => {
    try {
      await roomService.updateRoom(room);
      const updatedList = await roomService.fetchAllRooms();
      set({ rooms: updatedList });
    } catch (error) {
      console.error("‚ùå Error updating room:", error);
    }
  },

  deleteRoom: async (id) => {
    try {
      await roomService.deleteRoom(id);
      const updatedList = await roomService.fetchAllRooms();
      set({ rooms: updatedList });
    } catch (error) {
      console.error("‚ùå Error deleting room:", error);
    }
  },

  // üëâ fetch buildings
  fetchBuildings: async () => {
    try {
      const data = await roomService.fetchAllBuildings();
      set({ buildings: data });
    } catch (error) {
      console.error("‚ùå Error fetching buildings:", error);
    }
  },

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
  checkAvailableRooms: async (
    start_date: string,
    end_date: string,
    exclude_id?: number
  ) => {
    set({ checkingAvailability: true, error: null });
    try {
      const availableRooms = await roomService.getAvailableRooms(
        start_date,
        end_date,
        exclude_id
      );
      set({ availableRooms, checkingAvailability: false });
    } catch (error) {
      console.error("‚ùå Error checking available rooms:", error);
      set({
        error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ",
        checkingAvailability: false,
      });
    }
  },

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  checkRoomConflicts: async (
    room_id: number,
    start_date: string,
    end_date: string,
    exclude_id?: number
  ) => {
    set({ checkingAvailability: true, error: null });
    try {
      const conflicts = await roomService.getRoomConflicts(
        room_id,
        start_date,
        end_date,
        exclude_id
      );
      set({ roomConflicts: conflicts, checkingAvailability: false });
    } catch (error) {
      console.error("‚ùå Error checking room conflicts:", error);
      set({
        error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ",
        checkingAvailability: false,
      });
    }
  },

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
  checkAllAvailableRooms: async (
    start_date: string,
    end_date: string,
    exclude_id?: number
  ) => {
    set({ checkingAvailability: true, error: null });
    try {
      const availableRooms = await roomService.getAllAvailableRooms(
        start_date,
        end_date,
        exclude_id
      );
      set({ availableRooms, checkingAvailability: false });
    } catch (error) {
      console.error("‚ùå Error checking all available rooms:", error);
      set({
        error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ",
        checkingAvailability: false,
      });
    }
  },

  // ‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
  clearAvailabilityCheck: () => {
    set({ availableRooms: [], roomConflicts: [], checkingAvailability: false });
  },
}));
