import React from 'react';
import { useLocation } from 'react-router-dom';
import { URLEncryption, ProtectionLevel, RouteHelpers } from './urlEnCryption';

// üìã Type definitions
interface SecureParams {
  [key: string]: string | number | boolean | null | undefined;
}

interface SecureRouteProps {
  children: React.ReactNode;
  protectionLevel: ProtectionLevel;
  fallback?: React.ReactNode;
}

interface SecureComponentProps {
  secureParams: SecureParams;
}

// üîê ‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™
export const SecureRoute: React.FC<SecureRouteProps> = ({ 
  children, 
  protectionLevel, 
  fallback = <div>‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ</div> 
}) => {
  const location = useLocation();
  const [params, setParams] = React.useState<SecureParams>({});
  const [isValid, setIsValid] = React.useState<boolean>(true);

  React.useEffect(() => {
    try {
      // ‡∏î‡∏∂‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å URL
      const extractedParams = RouteHelpers.parseSecureParams(location.pathname, protectionLevel);
      
      if (Object.keys(extractedParams).length > 0) {
        // ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™
        setParams(extractedParams as SecureParams);
        setIsValid(true);
      } else if (protectionLevel === ProtectionLevel.NONE) {
        // ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ - ‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏™‡∏°‡∏≠
        setIsValid(true);
      } else {
        // ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™
        // ‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö URL ‡∏õ‡∏Å‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™)
        setIsValid(true);
        console.warn('‚ö†Ô∏è URL ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ');
      }
    } catch (error) {
      console.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏î‡πâ:', error);
      // ‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡πÅ‡∏°‡πâ‡∏°‡∏µ error (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backward compatibility)
      setIsValid(true);
    }
  }, [location.pathname, protectionLevel]);

  // ‡∏™‡πà‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö children
  const childrenWithParams = React.Children.map(children, (child) => {
    if (React.isValidElement(child)) {
      // ‡πÉ‡∏ä‡πâ type assertion ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Å‡∏ß‡πà‡∏≤
      return React.cloneElement(child as React.ReactElement<SecureComponentProps>, { 
        secureParams: params 
      });
    }
    return child;
  });

  if (!isValid) {
    return <>{fallback}</>;
  }

  return <>{childrenWithParams}</>;
};

// üîß Hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå
export const useSecureParams = (): SecureParams => {
  const location = useLocation();
  const [params, setParams] = React.useState<SecureParams>({});

  React.useEffect(() => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ URL ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (URLEncryption.isEncryptedURL(location.pathname)) {
      const extractedParams = URLEncryption.extractParams(location.pathname, true);
      setParams(extractedParams as SecureParams);
    } else {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà URL ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å query parameters
      const url = new URL(location.pathname, window.location.origin);
      const queryParams: SecureParams = {};
      url.searchParams.forEach((value, key) => {
        queryParams[key] = value;
      });
      setParams(queryParams);
    }
  }, [location.pathname]);

  return params;
};

// üîó Hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™
export const useSecureLink = () => {
  const createSecureLink = (
    basePath: string, 
    params: Record<string, any>, 
    protectionLevel: ProtectionLevel = ProtectionLevel.ENCRYPTED
  ): string => {
    return RouteHelpers.generateSecurePath(basePath, params, protectionLevel);
  };

  const navigateToSecure = (
    basePath: string, 
    params: Record<string, any>, 
    protectionLevel: ProtectionLevel = ProtectionLevel.ENCRYPTED
  ): void => {
    const securePath = createSecureLink(basePath, params, protectionLevel);
    window.location.href = securePath;
  };

  return { 
    createSecureLink, 
    navigateToSecure 
  };
};

// üîß Utility function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö type-safe parameter extraction
export const extractSecureParam = <T extends string | number | boolean>(
  params: SecureParams, 
  key: string, 
  defaultValue: T
): T => {
  const value = params[key];
  if (value === undefined || value === null) {
    return defaultValue;
  }
  
  // Type-safe conversion
  if (typeof defaultValue === 'number') {
    return (Number(value) || defaultValue) as T;
  }
  if (typeof defaultValue === 'boolean') {
    return (value === 'true' || value === true) as T;
  }
  return (String(value)) as T;
};

// üîß Utility function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö parameter
export const hasSecureParam = (params: SecureParams, key: string): boolean => {
  return params[key] !== undefined && params[key] !== null;
};